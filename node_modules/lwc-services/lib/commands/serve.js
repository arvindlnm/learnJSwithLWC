"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const cli_ux_1 = require("cli-ux");
const fs = require("fs");
const path = require("path");
const compression = require('compression');
const helmet = require('helmet');
const express = require('express');
const lwcConfig_1 = require("../config/lwcConfig");
const serve_1 = require("../messages/serve");
const logger_1 = require("../utils/logger");
class Serve extends command_1.Command {
    async run() {
        const { flags } = this.parse(Serve);
        // eslint-disable-next-line no-console
        console.clear();
        logger_1.welcome();
        const BUILD_DIR = flags.directory ? flags.directory : lwcConfig_1.lwcConfig.buildDir;
        lwcConfig_1.lwcConfig.server.host = flags.host ? flags.host : lwcConfig_1.lwcConfig.server.host;
        lwcConfig_1.lwcConfig.server.port = flags.port ? flags.port : lwcConfig_1.lwcConfig.server.port;
        // Override for SaaS deployments
        if (process.env.PORT) {
            lwcConfig_1.lwcConfig.server.port = Number(process.env.PORT);
        }
        if (process.env.HOST) {
            lwcConfig_1.lwcConfig.server.host = process.env.HOST;
        }
        // Check if given source directory exists. If not we're exiting.
        if (!fs.existsSync(BUILD_DIR)) {
            logger_1.log(serve_1.messages.errors.no_build_dir, BUILD_DIR);
            return;
        }
        const app = express();
        app.use(helmet());
        app.use(compression());
        app.use(express.static(BUILD_DIR));
        if (lwcConfig_1.lwcConfig.server.customConfig &&
            fs.existsSync(lwcConfig_1.lwcConfig.server.customConfig)) {
            const customExpressConfig = require(path.resolve(lwcConfig_1.lwcConfig.server.customConfig));
            customExpressConfig(app);
        }
        app.use('*', (req, res) => {
            res.sendFile(path.resolve(BUILD_DIR, 'index.html'));
        });
        app.listen(lwcConfig_1.lwcConfig.server.port, lwcConfig_1.lwcConfig.server.host, () => {
            const protocol = 'http';
            const url = `${protocol}://${lwcConfig_1.lwcConfig.server.host}:${lwcConfig_1.lwcConfig.server.port}`;
            logger_1.log(serve_1.messages.logs.local_server_listening, url);
            if (flags.open) {
                cli_ux_1.default.open(url);
            }
        });
    }
}
Serve.description = serve_1.messages.description;
Serve.examples = serve_1.messages.help.examples;
Serve.flags = {
    help: command_1.flags.help({ char: 'h' }),
    directory: command_1.flags.string({
        char: 'd',
        description: serve_1.messages.flags.directory,
        default: lwcConfig_1.lwcConfig.buildDir
    }),
    host: command_1.flags.string({
        char: 'i',
        description: serve_1.messages.flags.host,
        default: lwcConfig_1.lwcConfig.server.host
    }),
    open: command_1.flags.boolean({
        char: 'o',
        description: serve_1.messages.flags.open,
        default: lwcConfig_1.lwcConfig.server.open
    }),
    port: command_1.flags.integer({
        char: 'p',
        description: serve_1.messages.flags.port,
        default: lwcConfig_1.lwcConfig.server.port
    })
};
exports.default = Serve;
